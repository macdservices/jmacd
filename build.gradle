
import com.vanniktech.maven.publish.SonatypeHost;

buildscript {
	repositories {
		mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
	}

	dependencies {
		classpath "com.vanniktech:gradle-maven-publish-plugin:0.13.0"
	}
}
	
plugins {
	// https://plugins.gradle.org/plugin/com.vanniktech.maven.publish
	// https://github.com/vanniktech/gradle-maven-publish-plugin
	id "com.vanniktech.maven.publish" version "0.25.2"
}

class Version {
	String versionNameString = System.getenv("ORG_GRADLE_PROJECT_VERSION_NAME")

	String toString() {
		if (versionNameString == null) {
			return "1.1.1.1"
		} else {
			return "$versionNameString"
		}
	}
}

subprojects {

	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'project-report'
	apply plugin: 'java-library'
	apply plugin: "com.vanniktech.maven.publish"

	sourceCompatibility = 19
	targetCompatibility = 19
	compileJava.options.encoding = 'UTF-8'

	group='com.macdservices'

	version = new Version().toString();

/*	
	compileJava {
	    options.compilerArgs << '-Xlint:unchecked' 
	}
*/
	
	repositories {
		mavenCentral()
		jcenter()
	}

	task allDeps(type: DependencyReportTask) {}

	task checkDependencies() {
		doLast {
			 configurations.runtimeClasspath.each { file ->
			if ( file.toString().contains('build') == false) {
				//println "TRACER checking: " + file.name
				assert file.exists()
				//TODO echo -e '\e[1A\e[K'
				}
			}
		}
	}

	configurations.all {
	 resolutionStrategy {
	   //force "groupId:artifactId:Version"
	   failOnVersionConflict()
	 }
	}

	task showJavaVersion {
		doLast {
			println "Java Version: " + JavaVersion.current()
		}
	}

    task hello {
        doLast { task ->
            println "I'm $task.project.name and rootProject $rootProject"
        }
    }

	mavenPublishing {
	  //publishToMavenCentral(SonatypeHost.DEFAULT)
	
	  // or when publishing to https://s01.oss.sonatype.org
	  publishToMavenCentral(SonatypeHost.S01)
	
	  signAllPublications()
	}
	
	mavenPublishing {
	  pom {
		url = "https://github.com/macdservices/jmacd"	  
	    inceptionYear = "2023"
	    licenses {
	      license {
	        name = "BSD-3-Clause"
	        url = "https://fossa.com/blog/open-source-software-licenses-101-bsd-3-clause-license/"
	        distribution = "https://fossa.com/blog/open-source-software-licenses-101-bsd-3-clause-license/"
	      }
	    }
	    developers {
	      developer {
	        id = "macdservices"
	        name = "Paul Davenport"
	        url = "https://github.com/macdservices"
	      }
	    }
	    scm {
	      url = "https://github.com/macdservices/jmacd"
	      connection = "scm:git:git://github.com/macdservices/jmacd.git"
	      developerConnection = "scm:git:ssh://git@github.com:macdservices/jmacd.git"
	    }
	  }
	}
    
	dependencies {
    	compileOnly('org.projectlombok:lombok:1.18.26')
    	annotationProcessor('org.projectlombok:lombok:1.18.26')
    	testCompileOnly('org.projectlombok:lombok:1.18.26')
    	testAnnotationProcessor('org.projectlombok:lombok:1.18.26')
    }  
    
	task sourcesJar(type: Jar, dependsOn: classes) {
	    classifier = 'sources'
	    from sourceSets.main.allSource
	}
	
	task javadocJar(type: Jar, dependsOn: javadoc) {
	    classifier = 'javadoc'
	    from javadoc.destinationDir
	}
	
	artifacts {
	    archives sourcesJar
	    archives javadocJar
	}    
}

